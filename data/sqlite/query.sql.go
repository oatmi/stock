// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package sqlite

import (
	"context"
)

const countStocks = `-- name: CountStocks :one
SELECT count(*) FROM stocks
`

func (q *Queries) CountStocks(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countStocks)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listStocks = `-- name: ListStocks :many
SELECT id, name, product_type, type, supplier, model, unit, price, batch_no_in, way_in, location, batch_no_produce, produce_date, stock_date, stock_num, current_num, value FROM stocks
WHERE
    ($1 IS NULL OR $1 LIKE ) AND
    product_type =    ? AND
    Type         =    ? AND
    produce_date =    ? AND
    location    LIKE ?
ORDER BY id
`

type ListStocksParams struct {
	Name        string
	ProductType int64
	Type        int64
	ProduceDate string
	Location    string
}

func (q *Queries) ListStocks(ctx context.Context, arg ListStocksParams) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, listStocks,
		arg.Name,
		arg.ProductType,
		arg.Type,
		arg.ProduceDate,
		arg.Location,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProductType,
			&i.Type,
			&i.Supplier,
			&i.Model,
			&i.Unit,
			&i.Price,
			&i.BatchNoIn,
			&i.WayIn,
			&i.Location,
			&i.BatchNoProduce,
			&i.ProduceDate,
			&i.StockDate,
			&i.StockNum,
			&i.CurrentNum,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
